diff --git a/examples/src/main/java/edu/berkeley/cs/jqf/examples/svg/SVGDocumentGenerator.java b/examples/src/main/java/edu/berkeley/cs/jqf/examples/svg/SVGDocumentGenerator.java
new file mode 100644
index 0000000..ee0b9d1
--- /dev/null
+++ b/examples/src/main/java/edu/berkeley/cs/jqf/examples/svg/SVGDocumentGenerator.java
@@ -0,0 +1,226 @@
+package edu.berkeley.cs.jqf.examples.svg;
+
+
+import com.pholser.junit.quickcheck.generator.GenerationStatus;
+import com.pholser.junit.quickcheck.generator.Generator;
+import com.pholser.junit.quickcheck.generator.Size;
+import com.pholser.junit.quickcheck.internal.GeometricDistribution;
+import com.pholser.junit.quickcheck.random.SourceOfRandomness;
+import edu.berkeley.cs.jqf.examples.common.AlphaStringGenerator;
+import edu.berkeley.cs.jqf.examples.common.Dictionary;
+import edu.berkeley.cs.jqf.examples.common.DictionaryBackedStringGenerator;
+import org.apache.batik.anim.dom.SVGDOMImplementation;
+import org.junit.Assume;
+import org.w3c.dom.*;
+
+import javax.xml.parsers.DocumentBuilderFactory;
+import java.io.IOException;
+import java.util.HashSet;
+
+
+
+/**
+ * A generator for SVG documents.
+ *
+ * @author James Kukucka
+ */
+public class SVGDocumentGenerator extends Generator<Document> {
+
+
+    private static DocumentBuilderFactory documentBuilderFactory =
+            DocumentBuilderFactory.newInstance();
+
+    private static GeometricDistribution geometricDistribution =
+            new GeometricDistribution();
+
+    private static final String[] elements = {"a",
+            "altGlyph",
+            "altGlyphDef",
+            "altGlyphItem",
+            "animate",
+            "animateColor",
+            "animateMotion",
+            "animateTransform",
+            "circle",
+            "clipPath",
+            "color-profile",
+            "cursor",
+            "definition-src",
+            "defs",
+            "desc",
+            "ellipse",
+            "feBlend",
+            "feColorMatrix",
+            "feComponentTransfer",
+            "feComposite",
+            "feConvolveMatrix",
+            "feDiffuseLighting",
+            "feDisplacementMap",
+            "feDistantLight",
+            "feFlood",
+            "feFuncA",
+            "feFuncR",
+            "feFuncG",
+            "feFuncB",
+            "feGaussianBlur",
+            "feImage",
+            "feMerge",
+            "feMergeNode",
+            "feMorphology",
+            "feOffset",
+            "fePointLight",
+            "feSpecularLighting",
+            "feSpotLight",
+            "feTile",
+            "feTurbulence",
+            "filter",
+            "font",
+            "font-face",
+            "font-face-format",
+            "font-face-name",
+            "font-face-src",
+            "font-face-uri",
+            "foreignObject",
+            "g",
+            "glyph",
+            "glyphRef",
+            "hkern",
+            "image",
+            "line",
+            "linearGradient",
+            "marker",
+            "mask",
+            "metadata",
+            "missing-glyph",
+            "mpath",
+            "path",
+            "pattern",
+            "polygon",
+            "polyline",
+            "radialGradient",
+            "rect",
+            "set",
+            "script",
+            "stop",
+            "style",
+            "svg",
+            "switch",
+            "symbol",
+            "text",
+            "textPath",
+            "title",
+            "tref",
+            "tspan",
+            "use",
+            "view",
+            "vkern"};
+
+    private HashSet<String> used_elements = new HashSet<>();
+
+    /**
+     * Mean number of child nodes for each XML element.
+     */
+    private static final double MEAN_NUM_CHILDREN = 4;
+
+    /**
+     * Mean number of attributes for each XML element.
+     */
+    private static final double MEAN_NUM_ATTRIBUTES = 2;
+
+    /**
+     * Minimum size of XML tree.
+     *
+     * @see {@link #configure(Size)}
+     */
+    private int minDepth = 0;
+
+    /**
+     * Maximum size of XML tree.
+     *
+     * @see {@link #configure(Size)}
+     */
+    private int maxDepth = 4;
+
+
+    public SVGDocumentGenerator() {
+        super(Document.class);
+    }
+
+    /**
+     * Configures the minimum/maximum size of the SVG document.
+     * <p>
+     * This method is not usually invoked directly. Instead, use
+     * the `@Size` annotation on fuzzed parameters to configure
+     * automatically.
+     *
+     * @param size the min/max size of the XML document
+     * @param size the min/max size of the XML document
+     */
+    public void configure(Size size) {
+        minDepth = size.min();
+        maxDepth = size.max();
+    }
+
+
+    private Generator<String> stringGenerator = new AlphaStringGenerator();
+
+
+    /**
+     * Configures the string generator used by this generator to use
+     * a dictionary. This is useful for overriding the default
+     * arbitrary string generator with something that pulls tag names
+     * from a predefined list.
+     *
+     * @param dict the dictionary file
+     * @throws IOException if the dictionary file cannot be read
+     */
+    public void configure(Dictionary dict) throws IOException {
+        stringGenerator = new DictionaryBackedStringGenerator(dict.value(), stringGenerator);
+    }
+
+    private Document populateDocument(Document document, SourceOfRandomness random, GenerationStatus status) {
+        String svgNS = SVGDOMImplementation.SVG_NAMESPACE_URI;
+        Element root = document.getDocumentElement();
+        Element new_element = document.createElementNS(svgNS, elements[random.nextInt(0, elements.length)]);
+        populateElement(document, new_element, random, status, 0);
+        root.appendChild(new_element);
+        return document;
+    }
+
+    @Override
+    public Document generate(SourceOfRandomness sourceOfRandomness, GenerationStatus generationStatus) {
+        DOMImplementation impl = SVGDOMImplementation.getDOMImplementation();
+        String svgNS = SVGDOMImplementation.SVG_NAMESPACE_URI;
+        Document doc = impl.createDocument(svgNS, "svg", null);
+
+        try {
+            populateDocument(doc, sourceOfRandomness, generationStatus);
+        } catch (DOMException e) {
+            Assume.assumeNoException(e);
+        }
+        return doc;
+    }
+
+    private String makeString(SourceOfRandomness random, GenerationStatus status) {
+        return stringGenerator.generate(random, status);
+    }
+
+    private void populateElement(Document document, Element elem, SourceOfRandomness random, GenerationStatus status, int depth) {
+
+        // Make children
+        String svgNS = SVGDOMImplementation.SVG_NAMESPACE_URI;
+        if (depth < minDepth || (depth < maxDepth && random.nextBoolean())) {
+            int numChildren = Math.max(0, geometricDistribution.sampleWithMean(MEAN_NUM_CHILDREN, random) - 1);
+            for (int i = 0; i < numChildren; i++) {
+
+                Element child = document.createElementNS(svgNS, elements[random.nextInt(0, elements.length)]);
+                populateElement(document, child, random, status, depth + 1);
+                elem.appendChild(child);
+            }
+        } else if (random.nextBoolean()) {
+            // Add text
+            Text text = document.createTextNode(makeString(random, status));
+            elem.appendChild(text);
+        }
+    }
+}
diff --git a/examples/src/test/java/edu/berkeley/cs/jqf/examples/batik/BatikParserTest.java b/examples/src/test/java/edu/berkeley/cs/jqf/examples/batik/BatikParserTest.java
new file mode 100644
index 0000000..39ade24
--- /dev/null
+++ b/examples/src/test/java/edu/berkeley/cs/jqf/examples/batik/BatikParserTest.java
@@ -0,0 +1,100 @@
+/*
+ * Copyright (c) 2017-2018 The Regents of the University of California
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package edu.berkeley.cs.jqf.examples.batik;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+import com.pholser.junit.quickcheck.From;
+import edu.berkeley.cs.jqf.examples.svg.SVGDocumentGenerator;
+import edu.berkeley.cs.jqf.examples.xml.XMLDocumentUtils;
+import edu.berkeley.cs.jqf.examples.common.Dictionary;
+import edu.berkeley.cs.jqf.fuzz.Fuzz;
+import edu.berkeley.cs.jqf.fuzz.JQF;
+import org.apache.batik.transcoder.TranscoderException;
+import org.apache.batik.transcoder.TranscoderInput;
+import org.apache.batik.transcoder.TranscoderOutput;
+import org.apache.batik.transcoder.image.JPEGTranscoder;
+import org.junit.Assume;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Document;
+import java.io.ByteArrayOutputStream;
+
+@RunWith(JQF.class)
+public class BatikParserTest {
+
+    @Fuzz
+    public void testWithInputStream(InputStream in) {
+        try {
+                 // Create a JPEGTranscoder and set its quality hint.t
+                JPEGTranscoder t = new JPEGTranscoder();
+                t.addTranscodingHint(JPEGTranscoder.KEY_QUALITY, new Float(.8));
+
+                // Set the transcoder input and output.
+                TranscoderInput input = new TranscoderInput(in);
+                ByteArrayOutputStream ostream = new ByteArrayOutputStream();
+                TranscoderOutput output = new TranscoderOutput(ostream);
+
+                // Perform the transcoding.
+                t.transcode(input, output);
+                ostream.flush();
+                ostream.close();
+        } catch(IOException e) {
+            Assume.assumeNoException(e);
+        } catch(TranscoderException e) {
+            Assume.assumeNoException(e);
+        }
+    }
+
+    @Fuzz
+    public void testWithGenerator(@From(SVGDocumentGenerator.class)
+                                      @Dictionary("dictionaries/batik-svg.dict") Document dom) {
+        testWithInputStream(XMLDocumentUtils.documentToInputStream(dom));
+    }
+
+    @Fuzz
+    public void debugWithGenerator(@From(SVGDocumentGenerator.class)
+                                       @Dictionary("dictionaries/batik-svg.dict") Document dom) {
+        System.out.println(XMLDocumentUtils.documentToString(dom));
+        testWithGenerator(dom);
+    }
+
+    @Fuzz
+    public void testWithString(String input) {
+        testWithInputStream(new ByteArrayInputStream(input.getBytes()));
+    }
+
+    @Test
+    public void testSmall() throws IOException {
+        testWithString("<Y");
+    }
+
+}
diff --git a/examples/src/test/resources/dictionaries/batik-svg.dict b/examples/src/test/resources/dictionaries/batik-svg.dict
new file mode 100644
index 0000000..05b8aca
--- /dev/null
+++ b/examples/src/test/resources/dictionaries/batik-svg.dict
@@ -0,0 +1,118 @@
+svg
+g
+defs
+symbol
+use
+switch
+requiredExtensions
+systemLanguage
+desc
+title
+metadata
+id
+lang
+role
+aria-activedescendant
+aria-autocomplete 
+aria-busy 
+aria-checked 
+aria-colcount 
+aria-colindex 
+aria-colspan 
+aria-controls 
+aria-current 
+aria-describedby 
+aria-detail
+aria-disable
+aria-dropeffect
+aria-errormessage 
+aria-expanded 
+aria-flowto 
+aria-grabber
+aria-haspopup
+aria-hidden
+aria-invalid
+aria-keyshortcut
+aria-label
+aria-labelledby
+aria-atomic
+aria-live 
+aria-modal
+aria-multiline
+aria-multiselectable
+aria-orientation
+aria-owns 
+aria-placeholder 
+aria-posinsert
+aria-pressed
+aria-readonly
+aria-relevant
+aria-required 
+aria-roledescription
+aria-rowcount 
+aria-rowindex 
+aria-rowspan 
+aria-selected 
+aria-setsize 
+aria-sort 
+aria-valuemax
+aria-valuemin 
+aria-valuenow 
+aria-valuetext
+aria-level
+tabindex
+a
+audio
+canvas
+circle
+clipPath
+defs
+desc
+ellipse
+feBlend
+feColorMatrix
+feComponentTransfer
+feComposite
+feConvolveMatrix
+feDiffuseLighting
+feDistantLight
+feDropShadow
+feFlood
+feFuncA
+feFuncB
+feFuncG
+feFuncR
+feGaussianBlur
+feImage
+feMerge
+feMergeNode
+feMorphology
+feOffset
+fePointLight
+feSpecularLighting
+feSpotLight
+feTile
+feTurbulence
+filter
+foreignObject
+iframe
+line
+linearGradient
+marker
+mask
+mpath
+path
+pattern
+polygon
+polyline
+radialGradient
+rect
+script
+stop
+style
+text
+textPath
+tspan
+video
+view
+vkern
\ No newline at end of file
diff --git a/examples/pom.xml b/examples/pom.xml
index d37cfdb..a9ebf80 100644
--- a/examples/pom.xml
+++ b/examples/pom.xml
@@ -150,6 +150,14 @@
             <artifactId>bcel</artifactId>
             <version>6.2</version>
         </dependency>
+        <!-- https://mvnrepository.com/artifact/org.apache.xmlgraphics/batik-all -->
+        <dependency>
+            <groupId>org.apache.xmlgraphics</groupId>
+            <artifactId>batik-all</artifactId>
+            <version>1.11</version>
+            <type>pom</type>
+        </dependency>
+
         <dependency>
             <groupId>org.apache.tika</groupId>
             <artifactId>tika-parsers</artifactId>
